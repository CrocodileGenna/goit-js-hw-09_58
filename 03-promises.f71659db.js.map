{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBA+BtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTC,QAAQC,IAAIT,EAAOD,GACfE,GAEFI,EAAQ,uBAAwCK,OAAfX,EAAS,QAAYW,OAANV,EAAM,OAGxDM,EAAO,sBAAqCI,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,GACjDA,E,IAvCPT,EAAKC,KAAKmB,iBAAiB,UAE3B,SAAqBC,GACnBA,EAAEC,iBAOF,IANA,IAAMlB,EAAamB,OAAOvB,EAAKI,WAAWoB,OACpCnB,EAAYkB,OAAOvB,EAAKK,UAAUmB,OAClClB,EAAciB,OAAOvB,EAAKM,YAAYkB,OAExCC,EAAqBrB,EAEhBsB,EAAI,EAAGA,GAAKpB,EAAaoB,IAChCT,QAAQC,IAAIQ,GAEZnB,EAAcmB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGC,EAACD,EAADC,EAAGC,EAAkBF,EAAlBE,mBACVC,EAAAjC,GAASkC,OAAOC,QACd,uBAAiCd,OAARU,EAAE,QAAyBV,OAAnBW,EAAmB,M,IAGvDI,OAAM,SAAAN,G,IAAGC,EAACD,EAADC,EAAGC,EAAkBF,EAAlBE,mBACXC,EAAAjC,GAASkC,OAAOG,QACd,sBAAgChB,OAARU,EAAE,QAAyBV,OAAnBW,EAAmB,M,IAGzDL,GAAsBpB,C","sources":["src/js/03-promises.js"],"sourcesContent":["// import { concat } from 'lodash';\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n  firstValue: document.querySelector(\"input[name='delay']\"),\n  stepValue: document.querySelector(\"input[name='step']\"),\n  amountValue: document.querySelector(\"input[name='amount']\"),\n};\n\nrefs.form.addEventListener('submit', renderAwait);\n\nfunction renderAwait(e) {\n  e.preventDefault();\n  const firstValue = Number(refs.firstValue.value);\n  const stepValue = Number(refs.stepValue.value);\n  const amountValue = Number(refs.amountValue.value);\n\n  let firstValuePlusStep = firstValue;\n\n  for (let i = 1; i <= amountValue; i++) {\n    console.log(i);\n\n    createPromise(i, firstValuePlusStep)\n      .then(({ i, firstValuePlusStep }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${i} in ${firstValuePlusStep}ms`\n        );\n      })\n      .catch(({ i, firstValuePlusStep }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${i} in ${firstValuePlusStep}ms`\n        );\n      });\n    firstValuePlusStep += stepValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((respons, reject) => {\n    setTimeout(() => {\n      console.log(delay, position);\n      if (shouldResolve) {\n        // Fulfill\n        respons(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }\n      // Reject\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstValue","stepValue","amountValue","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","respons","reject","setTimeout","console","log","concat","addEventListener","e","preventDefault","Number","value","firstValuePlusStep1","i1","then","param","i","firstValuePlusStep","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.f71659db.js.map"}