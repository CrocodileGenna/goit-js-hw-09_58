{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBA+BtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTC,QAAQC,IAAIT,EAAOD,GACfE,GAEFI,EAAQ,CAAEN,WAAUC,UAGtBM,EAAO,CAAEP,WAAUC,S,GAClBA,E,IAvCPT,EAAKC,KAAKkB,iBAAiB,UAE3B,SAAqBC,GACnBA,EAAEC,iBAOF,IANA,IAAMjB,EAAakB,OAAOtB,EAAKI,WAAWmB,OACpClB,EAAYiB,OAAOtB,EAAKK,UAAUkB,OAClCjB,EAAcgB,OAAOtB,EAAKM,YAAYiB,OAExCC,EAAqBpB,EAEhBqB,EAAI,EAAGA,GAAKnB,EAAamB,IAChClB,EAAckB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGC,EAACD,EAADC,EAAGC,EAAkBF,EAAlBE,mBACVC,EAAAhC,GAASiC,OAAOC,QACd,uBAAiCC,OAARL,EAAE,QAAyBK,OAAnBJ,EAAmB,M,IAGvDK,OAAM,SAAAP,G,IAAGC,EAACD,EAADC,EAAGC,EAAkBF,EAAlBE,mBACXd,OACEe,EAAAhC,GAASiC,OAAOI,QACd,sBAA8BF,OAARL,EAAE,QAAyBK,OAAnBJ,EAAmB,O,IAIzDL,GAAsBnB,C","sources":["src/js/03-promises.js"],"sourcesContent":["// import { concat } from 'lodash';\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n  firstValue: document.querySelector(\"input[name='delay']\"),\n  stepValue: document.querySelector(\"input[name='step']\"),\n  amountValue: document.querySelector(\"input[name='amount']\"),\n};\n\nrefs.form.addEventListener('submit', renderAwait);\n\nfunction renderAwait(e) {\n  e.preventDefault();\n  const firstValue = Number(refs.firstValue.value);\n  const stepValue = Number(refs.stepValue.value);\n  const amountValue = Number(refs.amountValue.value);\n\n  let firstValuePlusStep = firstValue;\n\n  for (let i = 1; i <= amountValue; i++) {\n    createPromise(i, firstValuePlusStep)\n      .then(({ i, firstValuePlusStep }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${i} in ${firstValuePlusStep}ms`\n        );\n      })\n      .catch(({ i, firstValuePlusStep }) => {\n        reject(\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${i} in ${firstValuePlusStep}ms`\n          )\n        );\n      });\n    firstValuePlusStep += stepValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((respons, reject) => {\n    setTimeout(() => {\n      console.log(delay, position);\n      if (shouldResolve) {\n        // Fulfill\n        respons({ position, delay });\n      }\n      // Reject\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstValue","stepValue","amountValue","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","respons","reject","setTimeout","console","log","addEventListener","e","preventDefault","Number","value","firstValuePlusStep1","i1","then","param","i","firstValuePlusStep","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.10a51785.js.map"}